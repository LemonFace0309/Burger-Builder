{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","shared/checkValidity.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elType","elConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","e","key","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onSignup","switchModeHandler","prevState","this","burgerInProgress","authRedirectPath","onSetAuthRedirectPath","formElsArray","Object","keys","map","formEl","invalid","changed","header","errorMessage","error","errorMsg","message","split","join","style","color","form","loading","onSubmit","btnType","authRedirect","isAuthenticated","to","className","classes","clicked","Component","connect","auth","token","burgerBuilder","inProgress","dispatch","actionCreators","rules","trim","length","maxLength","test","isNumeric","input","el","validationError","inputClasses","InputEl","push","Invalid","ValidationError","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.091b98dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport classes from './Auth.module.css'\nimport checkValidity from '../../shared/checkValidity'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport * as actionCreators from '../../store/actions/index'\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elType: 'input',\n        elConfig: {\n          type: 'email',\n          placeholder: 'Email Adress',\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elType: 'input',\n        elConfig: {\n          type: 'password',\n          placeholder: 'Password',\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignup: true,\n  }\n\n  componentDidMount() {\n    if (!this.props.burgerInProgress && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath()\n    }\n  }\n\n  inputChangedHandler = (e, key) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [key]: {\n        ...this.state.controls[key],\n        value: e.target.value,\n        valid: checkValidity(\n          e.target.value,\n          this.state.controls[key].validation,\n        ),\n        touched: true,\n      },\n    }\n    this.setState({ controls: updatedControls })\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault()\n    this.props.onSignup(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup,\n    )\n  }\n\n  switchModeHandler = () => {\n    this.setState((prevState) => {\n      return { isSignup: !prevState.isSignup }\n    })\n  }\n\n  render() {\n    const formElsArray = Object.keys(this.state.controls).map((key) => {\n      const formEl = this.state.controls[key]\n      return (\n        <Input\n          key={key}\n          elType={formEl.elType}\n          elConfig={formEl.elConfig}\n          value={formEl.value}\n          invalid={!formEl.valid}\n          touched={formEl.touched}\n          changed={(e) => this.inputChangedHandler(e, key)}\n        />\n      )\n    })\n\n    let header = <h3>Signup</h3>\n    if (!this.state.isSignup) {\n      header = (\n        <div>\n          <h3>Login</h3>\n          <p>Email: test@test.com</p>\n          <p>Password: 123456</p>\n        </div>\n      )\n    }\n\n    let errorMessage = null\n    if (this.props.error) {\n      const errorMsg = this.props.error.message.split('_').join(' ')\n      errorMessage = (\n        <p style={{ color: 'red' }}>\n          <strong>{errorMsg}</strong>\n        </p>\n      )\n    }\n\n    let form = <Spinner />\n    if (!this.props.loading) {\n      form = (\n        <form onSubmit={this.submitHandler}>\n          {formElsArray}\n          <Button btnType=\"Success\">Submit</Button>\n        </form>\n      )\n    }\n\n    let authRedirect = null\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {header}\n        {errorMessage}\n        {form}\n        <Button btnType=\"Danger\" clicked={this.switchModeHandler}>\n          Switch to {this.state.isSignup ? 'Login' : 'Signup'}\n        </Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    burgerInProgress: state.burgerBuilder.inProgress,\n    authRedirectPath: state.auth.authRedirectPath,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSignup: (email, password, isSignup) =>\n      dispatch(actionCreators.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () =>\n      dispatch(actionCreators.setAuthRedirectPath('/')),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\n","const checkValidity = (value, rules) => {\n  if (rules.required && value.trim() === '') {\n    return false\n  }\n\n  if (rules.minLength && value.length < rules.minLength) {\n    return false\n  }\n\n  if (rules.maxLength && value.length > rules.maxLength) {\n    return false\n  }\n\n  const emailPattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/\n  if (rules.isEmail && !emailPattern.test(value)) {\n    return false\n  }\n\n  const numericPatter = /^\\d+$/\n  if (rules.isNumeric && !numericPatter.test(value)) {\n    return false\n  }\n\n  return true\n}\n\nexport default checkValidity\n","import React from 'react'\n\nimport classes from './Input.module.css'\n\nconst input = (props) => {\n  let el = null\n  let validationError = null\n  const inputClasses = [classes.InputEl]\n\n  if (props.invalid && props.touched) {\n    inputClasses.push(classes.Invalid)\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>\n  }\n\n  switch (props.elType) {\n    case 'input':\n      el = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      )\n      break\n    case 'textarea':\n      el = (\n        <textarea\n          className={inputClasses.join(' ')}\n          {...props.elConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      )\n      break\n    case 'select':\n      el = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elConfig.options.map((option) => {\n            return (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            )\n          })}\n        </select>\n      )\n      break\n    default:\n      el = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      )\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {el}\n      {validationError}\n    </div>\n  )\n}\n\nexport default input\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputEl\":\"Input_InputEl__2MIlF\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};"],"sourceRoot":""}