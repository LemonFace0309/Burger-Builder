{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","shared/checkValidity.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","connect","state","loading","auth","error","isAuthenticated","token","burgerInProgress","burgerBuilder","inProgress","authRedirectPath","dispatch","onSignup","email","password","isSignup","actionCreators","onSetAuthRedirectPath","props","useState","elType","elConfig","type","placeholder","value","validation","required","isEmail","valid","touched","minLength","controls","setControls","setIsSignup","useEffect","formElsArray","Object","keys","map","key","formEl","invalid","changed","e","updatedControls","target","checkValidity","inputChangedHandler","header","errorMessage","errorMsg","message","split","join","style","color","form","onSubmit","preventDefault","btnType","authRedirect","to","className","classes","Auth","clicked","rules","trim","length","maxLength","test","isNumeric","input","el","validationError","inputClasses","InputEl","push","Invalid","ValidationError","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.9126ea35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport classes from './Auth.module.css'\nimport checkValidity from '../../shared/checkValidity'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport * as actionCreators from '../../store/actions/index'\n\nconst Auth = (props) => {\n  const [controls, setControls] = useState({\n    email: {\n      elType: 'input',\n      elConfig: {\n        type: 'email',\n        placeholder: 'Email Adress',\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    password: {\n      elType: 'input',\n      elConfig: {\n        type: 'password',\n        placeholder: 'Password',\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6,\n      },\n      valid: false,\n      touched: false,\n    },\n  })\n  const [isSignup, setIsSignup] = useState(true)\n  const { burgerInProgress, authRedirectPath, onSetAuthRedirectPath } = props\n\n  useEffect(() => {\n    if (!burgerInProgress && authRedirectPath !== '/') {\n      onSetAuthRedirectPath()\n    }\n  }, [burgerInProgress, authRedirectPath, onSetAuthRedirectPath])\n\n  const inputChangedHandler = (e, key) => {\n    const updatedControls = {\n      ...controls,\n      [key]: {\n        ...controls[key],\n        value: e.target.value,\n        valid: checkValidity(e.target.value, controls[key].validation),\n        touched: true,\n      },\n    }\n    setControls(updatedControls)\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    props.onSignup(controls.email.value, controls.password.value, isSignup)\n  }\n\n  const switchModeHandler = () => {\n    // this.setState((prevState) => {\n    //   return { isSignup: !prevState.isSignup }\n    // })\n    setIsSignup(!isSignup)\n  }\n\n  const formElsArray = Object.keys(controls).map((key) => {\n    const formEl = controls[key]\n    return (\n      <Input\n        key={key}\n        elType={formEl.elType}\n        elConfig={formEl.elConfig}\n        value={formEl.value}\n        invalid={!formEl.valid}\n        touched={formEl.touched}\n        changed={(e) => inputChangedHandler(e, key)}\n      />\n    )\n  })\n\n  let header = <h3>Signup</h3>\n  if (!isSignup) {\n    header = (\n      <div>\n        <h3>Login</h3>\n        <p>Email: test@test.com</p>\n        <p>Password: 123456</p>\n      </div>\n    )\n  }\n\n  let errorMessage = null\n  if (props.error) {\n    const errorMsg = props.error.message.split('_').join(' ')\n    errorMessage = (\n      <p style={{ color: 'red' }}>\n        <strong>{errorMsg}</strong>\n      </p>\n    )\n  }\n\n  let form = <Spinner />\n  if (!props.loading) {\n    form = (\n      <form onSubmit={submitHandler}>\n        {formElsArray}\n        <Button btnType=\"Success\">Submit</Button>\n      </form>\n    )\n  }\n\n  let authRedirect = null\n  if (props.isAuthenticated) {\n    authRedirect = <Redirect to={props.authRedirectPath} />\n  }\n\n  return (\n    <div className={classes.Auth}>\n      {authRedirect}\n      {header}\n      {errorMessage}\n      {form}\n      <Button btnType=\"Danger\" clicked={switchModeHandler}>\n        Switch to {isSignup ? 'Login' : 'Signup'}\n      </Button>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    burgerInProgress: state.burgerBuilder.inProgress,\n    authRedirectPath: state.auth.authRedirectPath,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSignup: (email, password, isSignup) =>\n      dispatch(actionCreators.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () =>\n      dispatch(actionCreators.setAuthRedirectPath('/')),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\n","const checkValidity = (value, rules) => {\n  if (rules.required && value.trim() === '') {\n    return false\n  }\n\n  if (rules.minLength && value.length < rules.minLength) {\n    return false\n  }\n\n  if (rules.maxLength && value.length > rules.maxLength) {\n    return false\n  }\n\n  const emailPattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/\n  if (rules.isEmail && !emailPattern.test(value)) {\n    return false\n  }\n\n  const numericPatter = /^\\d+$/\n  if (rules.isNumeric && !numericPatter.test(value)) {\n    return false\n  }\n\n  return true\n}\n\nexport default checkValidity\n","import React from 'react'\n\nimport classes from './Input.module.css'\n\nconst input = (props) => {\n  let el = null\n  let validationError = null\n  const inputClasses = [classes.InputEl]\n\n  if (props.invalid && props.touched) {\n    inputClasses.push(classes.Invalid)\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>\n  }\n\n  switch (props.elType) {\n    case 'input':\n      el = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      )\n      break\n    case 'textarea':\n      el = (\n        <textarea\n          className={inputClasses.join(' ')}\n          {...props.elConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      )\n      break\n    case 'select':\n      el = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elConfig.options.map((option) => {\n            return (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            )\n          })}\n        </select>\n      )\n      break\n    default:\n      el = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      )\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {el}\n      {validationError}\n    </div>\n  )\n}\n\nexport default input\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputEl\":\"Input_InputEl__2MIlF\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};"],"sourceRoot":""}